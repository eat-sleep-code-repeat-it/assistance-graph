// 1
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// 2
generator client {
  provider = "prisma-client-js"
}

// Models generated from src/schema.ts (GraphQL schema)
// - Questionnaire contains Sections
// - Section contains ViewGroups
// - ViewGroup contains Questions

model Questionnaire {
  id             String                 @id @default(uuid())
  currentVersion Int                    @default(1)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  versions       QuestionnaireVersion[]

  @@map("questionnaires")
}

model QuestionnaireVersion {
  id              String                  @id @default(uuid())
  questionnaire   Questionnaire           @relation(fields: [questionnaireId], references: [id])
  questionnaireId String
  version         Int
  sections        Section[]
  responses       QuestionnaireResponse[]
  createdAt       DateTime                @default(now())

  @@unique([questionnaireId, version])
  @@map("questionnaire_versions")
}

model QuestionnaireResponse {
  id                   String               @id @default(uuid())
  questionnaireVersion QuestionnaireVersion @relation(fields: [versionId], references: [id])
  versionId            String
  respondentId         String? // Optional: ID of the person who responded
  status               String // e.g., "in_progress", "completed"
  answers              String // JSON string containing the answers
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  submittedAt          DateTime? // When the response was submitted

  @@index([versionId])
  @@map("questionnaire_responses")
}

model Section {
  id                     String               @id @default(uuid())
  questionnaireVersion   QuestionnaireVersion @relation(fields: [questionnaireVersionId], references: [id])
  questionnaireVersionId String
  viewGroups             ViewGroup[]

  @@index([questionnaireVersionId])
  @@map("sections")
}

model ViewGroup {
  id           String     @id @default(uuid())
  viewId       String
  name         String
  titleText    String
  subTitleText String?
  bodyText     String?
  section      Section    @relation(fields: [sectionId], references: [id])
  sectionId    String
  questions    Question[]

  @@index([sectionId])
  @@map("view_groups")
}

model Question {
  id           String    @id @default(uuid())
  name         String
  keyName      String
  text         String
  type         String
  options      String?
  order        Int
  required     Boolean
  yesText      String?
  noText       String?
  defaultValue String?
  viewGroup    ViewGroup @relation(fields: [viewGroupId], references: [id])
  viewGroupId  String

  @@index([viewGroupId])
  @@map("questions")
}
